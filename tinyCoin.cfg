############ TINY COIN ################

### NETWORK CONFIGURATION CONSTANTS ###

CYCLES 100000
SIZE 500
DEGREE 5

MAX_INITIAL_BITCOINS 100
PROB_GENERATE_TRANS 0.0001

LATENCY = 3 # 1 sec per trans: http://bitcoinstats.com/network/propagation/
EXTRA_LATENCY_PER_TRANS 1 # put things (SIZE, DEGREE, MAX_TRANS_PER_BLOCK etc) so as to ensure a block takes 13 (or few more) cycles on average to be propagated to all the network
MAX_TRANS_PER_BLOCK 10

BLOCK_REWARD 10
EXTRA_REWARD_PER_TRANS 5

ORACLE_MEAN 600 # 600 seconds to mine a block compared to 13 is around 1/60
ORACLE_VARIANCE 50; # from 450 to 750

# Probability to CHOOSE one type of miner
PROB_CPU_POWER 0.05
PROB_GPU_POWER 0.15
PROB_FPGA_POWER 0.30
PROB_ASIC_POWER 1

# Probability to CREATE one type of miner or normal node
PROB_NORMAL 0.75
# Prob to be a type of miner
PROB_CPU 0.3
PROB_GPU 0.75
PROB_FPGA 0.90
PROB_ASIC 1

MAX_ASICS 1

# Probability to be SELFISH
PROB_CPU_SELFISH 0
PROB_GPU_SELFISH 0
PROB_FPGA_SELFISH 0
PROB_ASIC_SELFISH 1

MAX_SELFISH 1


#################################

#random.seed 1234567890
simulation.endtime CYCLES
simulation.logtime 10^5
simulation.experiments 1

network.size SIZE

# Keep latency fixed (apart from extra delays due to block dim)
protocol.tr UniformRandomTransport # NEED TO BUILD A CUSTOM ONE
{
	mindelay LATENCY
	maxdelay LATENCY
}

protocol.tinyProtocol TinyNode
{
	transport tr
	step 1
}

control.oracle Oracle
{
	protocol tinyProtocol
	step 1
	#step 100
	#from 100
	#until 201
	#step 100 
}


# Vedere topologia di bitcoin graph e invocare un connettore opportuno (o implementarne uno (see doc)..)
init.rnd WireKOut
init.rnd.undir true
init.rnd.k DEGREE
init.rnd.protocol tinyProtocol

init.sch CDScheduler 
{
	protocol tinyProtocol	
}

init.create TinyCoinInitialiser 
{
	protocol tinyProtocol 
}

control.observer TinyNodeObserver
{
	protocol tinyProtocol
	#step 1
	#from 10
	at 99900
	#FINAL
}

